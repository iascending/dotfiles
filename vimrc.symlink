scriptencoding utf-8
source ~/dotfiles/nvim/plugins.vim

set runtimepath+=~/.vim/plugged

" set path for :find config files
set path+=~/**1,~/.vim/**,~/dotfiles/**,~/.config/**,~/work/preprocess/**,~/Desktop/Projects/useful-commands/**

" Set encoding for editor itself, scriptencoding for vim scripts
set encoding=utf-8

" Enable mouse in all mode
set mouse=a

" Map leader key to space
let mapleader=" "

" Enable true color support
set termguicolors
let &t_8f = "\<Esc>[38:2:%lu:%lu:%lum"
let &t_8b = "\<Esc>[48:2:%lu:%lu:%lum"

" Vim airline theme
let g:airline_theme='papercolor'

" Change vertical split character to be a space (essentially hide it)
set fillchars+=vert:.

" Set preview window to appear at bottom or right
set splitbelow
set splitright

" Don't dispay mode in command line (airilne already shows it)
set noshowmode

" Don't give completion message
set shortmess+=c

set hlsearch
set incsearch

" ignore case when searching
set ignorecase

set showmatch
set shellcmdflag=-c

" if the search string has an upper case letter in it, the search will be case sensitive
set smartcase

" Automatically re-read file if a change was detected outside of vim
set autoread
au CursorHold * checktime

syntax on
filetype plugin indent on

" Enable line numbers
set number
set relativenumber

" Yank and paste with system clipboard
set clipboard=unnamed

" Do not wrap long lines by default
set nowrap

" Hide buffers instead of closing them
set hidden

" Insert spaces when TAB is pressed
set expandtab

" Change number of spaces that a TAB counts for
set softtabstop=2

" Indentation with < and > commands
set shiftwidth=2

" Show a visual vertical line under cursor
set cursorcolumn

" Show a visual horizontal line under cursor
set cursorline

" Show window title
set title

" Set shell used to execute commands
set shell=${SHELL}

" Set foldmethold and level for folding
set foldmethod=indent
set foldlevel=99

" Set not to fold lines when opening file
set nofoldenable

" Set updatetime for vim-signify
set updatetime=100

" =====================================================================
"                           PLUGIN SETUP
" =====================================================================

" Wrap in try/catch to avoid errors on initial install before plugin is available
try
" === Denite setup ==="
" Use ripgrep for searching current directory for files
" By default, ripgrep will respect rules in .gitignore
"   --files: Print each file that would be searched (but don't search)
"   --glob:  Include or exclues files for searching that match the given glob
call denite#custom#var('file/rec', 'command', ['rg', '--files', '--glob', '!.git'])

" Use ripgrep in place of grep
call denite#custom#var('grep', 'command', ['rg'])

" Custom options for ripgrep
"   --vimgrep:  Show results with every match on it's own line
"   --hidden:   Search hidden directories and files
"   --heading:  Show the file name above clusters of matches from each file
"   --S:        Search case insensitively if the pattern is all lowercase
call denite#custom#var('grep', 'default_opts', ['--hidden', '--vimgrep', '--heading', '-S'])

" Recommended defaults for ripgrep via Denite docs
call denite#custom#var('grep', 'recursive_opts', [])
call denite#custom#var('grep', 'pattern_opt', ['--regexp'])
call denite#custom#var('grep', 'separator', ['--'])
call denite#custom#var('grep', 'final_opts', [])

" Remove date from buffer list
call denite#custom#var('buffer', 'date_format', '')

" Custom options for Denite
"   auto_resize             - Auto resize the Denite window height automatically.
"   prompt                  - Customize denite prompt
"   direction               - Specify Denite window direction as directly below current pane
"   winminheight            - Specify min height for Denite window
"   highlight_mode_insert   - Specify h1-CursorLine in insert mode
"   prompt_highlight        - Specify color of prompt
"   highlight_matched_char  - Matched characters highlight
"   highlight_matched_range - matched range highlight
let s:denite_options = {'default' : {
\ 'split': 'floating',
\ 'start_filter': 1,
\ 'auto_resize': 1,
\ 'source_names': 'short',
\ 'prompt': 'λ ',
\ 'highlight_matched_char': 'QuickFixLine',
\ 'highlight_matched_range': 'Visual',
\ 'highlight_window_background': 'Visual',
\ 'highlight_filter_background': 'DiffAdd',
\ 'winrow': 1,
\ 'preview_width': (&columns - 40) * 0.38,
\ 'vertical_preview': 1
\ }}

" Loop through denite options and enable them
function! s:profile(opts) abort
  for l:fname in keys(a:opts)
    for l:dopt in keys(a:opts[l:fname])
      call denite#custom#option(l:fname, l:dopt, a:opts[l:fname][l:dopt])
    endfor
  endfor
endfunction

call s:profile(s:denite_options)
catch
  echo 'Denite not installed. It should work after running :PlugInstall'
endtry

" === Denite shorcuts === "
" Define mappings while in 'filter' mode
"   <C-o>         - Switch to normal mode inside of search results
"   <Esc>         - Exit denite window in any mode
"   <CR>          - Open currently selected file in any mode
"   <C-t>         - Open currently selected file in a new tab
"   <C-v>         - Open currently selected file a vertical split
"   <C-h>         - Open currently selected file in a horizontal split
autocmd FileType denite-filter call s:denite_filter_my_settings()
function! s:denite_filter_my_settings() abort
  imap <silent><buffer> <C-o>
  \ <Plug>(denite_filter_quit)
  inoremap <silent><buffer><expr> <Esc>
  \ denite#do_map('quit')
  nnoremap <silent><buffer><expr> <Esc>
  \ denite#do_map('quit')
  inoremap <silent><buffer><expr> <CR>
  \ denite#do_map('do_action')
  inoremap <silent><buffer><expr> <C-t>
  \ denite#do_map('do_action', 'tabopen')
  inoremap <silent><buffer><expr> <C-v>
  \ denite#do_map('do_action', 'vsplit')
  inoremap <silent><buffer><expr> <C-h>
  \ denite#do_map('do_action', 'split')
endfunction

" Define mappings while in denite window
"   <CR>        - Opens currently selected file
"   q or <Esc>  - Quit Denite window
"   d           - Delete currenly selected file
"   p           - Preview currently selected file
"   <C-o> or i  - Switch to insert mode inside of filter prompt
"   <C-t>       - Open currently selected file in a new tab
"   <C-v>       - Open currently selected file a vertical split
"   <C-h>       - Open currently selected file in a horizontal split
autocmd FileType denite call s:denite_my_settings()
function! s:denite_my_settings() abort
  nnoremap <silent><buffer><expr> <CR>
  \ denite#do_map('do_action')
  nnoremap <silent><buffer><expr> q
  \ denite#do_map('quit')
  nnoremap <silent><buffer><expr> <Esc>
  \ denite#do_map('quit')
  nnoremap <silent><buffer><expr> d
  \ denite#do_map('do_action', 'delete')
  nnoremap <silent><buffer><expr> p
  \ denite#do_map('do_action', 'preview')
  nnoremap <silent><buffer><expr> i
  \ denite#do_map('open_filter_buffer')
  nnoremap <silent><buffer><expr> <C-o>
  \ denite#do_map('open_filter_buffer')
  nnoremap <silent><buffer><expr> <C-t>
  \ denite#do_map('do_action', 'tabopen')
  nnoremap <silent><buffer><expr> <C-v>
  \ denite#do_map('do_action', 'vsplit')
  nnoremap <silent><buffer><expr> <C-h>
  \ denite#do_map('do_action', 'split')
endfunction

" === Coc.nvim === "
" use <tab> for trigger completion and navigate to next complete item
function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~ '\s'
endfunction

inoremap <silent><expr> <TAB>
  \ pumvisible() ? "\<C-n>" :
  \ <SID>check_back_space() ? "\<TAB>" :
  \ coc#refresh()

"Close preview window when completion is done.
autocmd! CompleteDone * if pumvisible() == 0 | pclose | endif

" === NeoSnippet === "
" Map <C-k> as shortcut to activate snippet if available
imap <C-k> <Plug>(neosnippet_expand_or_jump)
smap <C-k> <Plug>(neosnippet_expand_or_jump)
xmap <C-k> <Plug>(neosnippet_expand_target)

" Load custom snippets from snippets folder
let g:neosnippet#snippets_directory='~/.config/nvim/snippets'

" Hide conceal markers
let g:neosnippet#enable_conceal_markers = 0

" ==== NERDTree ====
" Show hidden files/directories
let g:NERDTreeShowHidden = 1

" Remove bookmarks and help text from NERDTree
let g:NERDTreeMinimalUI = 1

" Set NERDTree default window size
let g:NERDTreeWinSize=60

" Custom icons for expandable/expanded directories
" let g:NERDTreeDirArrowExpandable = '►'
" let g:NERDTreeDirArrowCollapsible = '▼'
let g:NERDTreeDirArrowExpandable = '▸'
let g:NERDTreeDirArrowCollapsible = '▾'
let g:WebDevIconsNerdTreeBeforeGlyphPadding = ''
let g:WebDevIconsUnicodeDecorateFolderNodes = v:true

" Hide certain files and directories from NERDTree
let g:NERDTreeIgnore = ['^\.DS_Store$', '^tags$', '\.git$[[dir]]', '\.idea$[[dir]]', '\.sass-cache$']

 " Wrap in try/catch to avoid errors on initial install before plugin is available
try
" === Vim airline ==== "
" Enable extensions
let g:airline_extensions = ['branch', 'hunks', 'coc']

" Do not draw separators for empty sections (only for the active window) >
let g:airline_skip_empty_sections = 1

" Smartly uniquify buffers names with similar filename, suppressing common parts of paths.
let g:airline#extensions#tabline#formatter = 'unique_tail'

" Custom setup that removes filetype/whitespace from default vim airline bar
let g:airline#extensions#default#layout = [['a', 'b', 'c'], ['x', 'z', 'warning', 'error']]

" Customize vim airline per filetype
" 'nerdtree'  - Hide nerdtree status line
" 'list'      - Only show file type plus current line number out of total
let g:airline_filetype_overrides = {
  \ 'nerdtree': [ get(g:, 'NERDTreeStatusline', ''), '' ],
  \ 'list': [ '%y', '%l/%L'],
  \ }

" Enable powerline fonts
let g:airline_powerline_fonts = 1

" Define custom airline symbols
if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif
let g:airline_symbols.paste = 'PASTE - '
let g:airline_left_sep = ''
let g:airline_left_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''
let g:airline_symbols.branch = ''
let g:airline_symbols.readonly = ''
let g:airline_symbols.linenr = ''
let g:airline_symbols.maxlinenr = ''
let g:airline_symbols.dirty='⚡'

let g:airline_section_a = airline#section#create(['paste', 'mode'])
function! AirlineInit()
    let g:airline_section_b = airline#section#create(['branch'])
    call airline#update_statusline()
endfunction
autocmd VimEnter * call AirlineInit()

" Enable caching of syntax highlighting groups
let g:airline_highlighting_cache = 1

" Don't show git changes to current file in airline
let g:airline#extensions#hunks#enabled=0

catch
  echo 'Airline not installed. It should work after running :PlugInPtall'
endtry

" === echodoc === "
" Enable echodoc on startup
let g:echodoc#enable_at_startup = 1

" === vim-javascript === "
" Enable syntax highlighting for JSDoc
let g:javascript_plugin_jsdoc = 1

" === vim-jsx === "
" Highlight jsx syntax even in non .jsx files
let g:jsx_ext_required = 0

" === javascript-libraries-syntax === "
let g:used_javascript_libs = 'underscore,requirejs,chai,jquery'

" === Signify === "
let g:signify_sign_delete = '-'

"==== Vue ====
let g:vim_vue_plugin_load_full_syntax = 1

" config vue comment format for vim-commentary plugin
function! OnChangeVueSubtype(subtype)
  echom 'Subtype is '.a:subtype
  if a:subtype == 'html'
    setlocal commentstring=<!--%s-->
    setlocal comments=s:<!--,m:\ \ \ \ ,e:-->
  elseif a:subtype =~ 'css'
    setlocal comments=s1:/*,mb:*,ex:*/ commentstring&
  else
    setlocal commentstring=//%s
    setlocal comments=sO:*\ -,mO:*\ \ ,exO:*/,s1:/*,mb:*,ex:*/,://
  endif
endfunction

" enable indentation line
let g:indentLine_enabled = 1
let g:indentLine_char_list = ['|', '¦', '┆', '┊']

"=============================================================================="
" ===                      CUSTOM COLORSCHEME CHANGES                      === "
" ============================================================================ "
"
" Add custom highlights in method that is executed every time a colorscheme is sourced
" See https://gist.github.com/romainl/379904f91fa40533175dfaec4c833f2f for details
function! TrailingSpaceHighlights() abort
  " Hightlight trailing whitespace
  highlight Trail ctermbg=red guibg=red
  call matchadd('Trail', '\s\+$', 100)
endfunction

function! s:custom_jason_colors()
  " coc.nvim color changes
  hi link CocErrorSign WarningMsg
  hi link CocWarningSign Number
  hi link CocInfoSign Type

  " Make background transparent for many things
  hi Normal ctermbg=NONE guibg=NONE
  hi NonText ctermbg=NONE guibg=NONE
  hi LineNr ctermfg=NONE guibg=NONE
  hi SignColumn ctermfg=NONE guibg=NONE
  hi StatusLine guifg=#16252b guibg=#6699CC
  hi StatusLineNC guifg=#16252b guibg=#16252b

  " Try to hide vertical spit and end of buffer symbol
  hi VertSplit gui=NONE guifg=#17252c guibg=#17252c
  hi EndOfBuffer ctermbg=NONE ctermfg=NONE guibg=#17252c guifg=#17252c

  " Customize NERDTree directory
  hi NERDTreeCWD guifg=#99c794

  " Make background color transparent for git changes
  hi SignifySignAdd ctermbg=NONE guibg=NONE
  hi SignifySignDelete ctermbg=NONE guibg=NONE
  hi SignifySignChange ctermbg=NONE guibg=NONE

  " Highlight git change signs
  hi SignifySignAdd guifg=#99c794
  hi SignifySignDelete guifg=#ec5f67
  hi SignifySignChange guifg=#c594c5

  " Highlight git diff added and removed lines
  hi DiffAdded   term=reverse ctermfg=0 ctermbg=121 guifg=bg guibg=#99c794
  hi DiffRemoved term=NONE ctermfg=253 ctermbg=203 guifg=#d8dee9 guibg=#ec5f67
endfunction

autocmd! ColorScheme * call TrailingSpaceHighlights()
autocmd! ColorScheme * call s:custom_jason_colors()
autocmd! ColorScheme OceanicNext call s:custom_jason_colors()

" Call method on window enter
augroup WindowManagement
  autocmd!
  autocmd WinEnter * call Handle_Win_Enter()
augroup END

" Change highlight group of preview window when open
function! Handle_Win_Enter()
  if &previewwindow
"    setlocal winhighlight=Normal:MarkdownError
  endif
endfunction

" Editor theme
set background=dark
try
  colorscheme OceanicNext
catch
  colorscheme slate
endtry

" ============================================================================ "
" ===                             KEY MAPPINGS                             === "
" ============================================================================ "
" Map a ESC key to jk
inoremap jk <ESC>
inoremap kj <ESC>

" Map line start and line end
map L $
map H ^

" Do not move cursor when highlight
nnoremap * *N
nnoremap # #N

" Move to next editor link
nnoremap j gj
nnoremap k gk

" ============ Search key mappings  =================
nnoremap / /\v
vnoremap / /\v
" Search and replace
map <leader>s :%s///<left><left>

"Toggle  highlighted search terms while preserving history
nnoremap <silent> <leader>/ :set hlsearch!<CR>

" ============ NERDTree key mappings ================
" Toggle NERDTree on/off
nmap <leader>n :NERDTreeToggle<CR>

" Opens current file location in NERDTree
nmap <leader>f :NERDTreeFind<CR>

" ============ Denite key mappings ==================
" Browser currently open buffers with (Denite)
nmap <leader>; :Denite buffer<CR>

" Browse list of files in current directory (Denite)
nmap <leader>t :DeniteProjectDir file/rec<CR>

" Search current directory for occurences of given term and close window if no results
nnoremap <leader>a :<C-u>Denite grep:. -no-empty<CR>

" Search current directory for occurences of word under cursor
nnoremap <leader>r :<C-u>DeniteCursorWord grep:.<CR>

" Resume previous denite search list
nnoremap <leader>p :<C-u>Denite -resume<CR>

" ============ coc.nvim key mappings ================
let g:coc_enable_locationlist = 0
autocmd User CocLocationsChange CocList --no-quit --normal location

" Jump to definition of current symbol
nmap <silent> <leader>gd <Plug>(coc-definition)

" Jump to references of current symbol
nmap <silent> <leader>gr <Plug>(coc-references)

" Jump to implementation of current symbol
nmap <silent> <leader>gi <Plug>(coc-implementation)

" Resume previous location list or enable preview toggle
nnoremap <silent><nowait> <leader>gp :<C-u>CocListResume<CR>

" Automatically remove trailing whitespace
nnoremap <leader>cw :StripWhitespace<CR>

" Easy-motion highlights first word letters bi-directionally
map <leader>w <Plug>(easymotion-bd-w)

" Allows you to save files you opened without write permissions via sudo
cmap w!! w !sudo tee %

" Generate jsdoc for function under cursor
" nmap <leader>jd :JsDoc<CR>

" vim-fugitive to show commits for every line
nnoremap <Leader>gb :Gblame<CR>
nnoremap <Leader>gs :Gstatus<CR>

" Delete current visual selection and dump in black hole buffer before pasting
" Used when you want to paste over something without it getting copied to
" Vim's default buffer
" vnoremap <leader>p "_dP

" ============ Vimux ================================
" run shell command from within vim
map <leader>vp :VimuxPromptCommand<CR>

" run last command again
map <leader>vl :VimuxRunLastCommand<CR>

 " vim-easy-align shortcuts
 " Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)

" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)

" From nelstrom/vim-visual-star-search. It  makes * and # work on visual mode too.
function! s:VSetSearch(cmdtype)
  let temp = @s
  norm! gv"sy
  let @/ = '\V' . substitute(escape(@s, a:cmdtype.'\'), '\n', '\\n', 'g')
  let @s = temp
endfunction
xnoremap * :<C-u>call <SID>VSetSearch('/')<CR>/<C-R>=@/<CR><CR>N
xnoremap # :<C-u>call <SID>VSetSearch('?')<CR>?<C-R>=@/<CR><CR>N

" Shortcuts for open-browser-github.vim
nnoremap <leader>ogt :OpenGithubIssue<Space>
nnoremap <leader>ogp :OpenGithubPullReq<CR>
nnoremap <leader>ogf :'<,'>OpenGithubFile<CR>

" ============================================================================ "
" ===                                 MISC.                                === "
" ============================================================================ "

" Automaticaly close nvim if NERDTree is only thing left open
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" Enable spellcheck for markdown files
autocmd BufRead,BufNewFile *.md setlocal spell

" Set backups
if has('persistent_undo')
  set undofile
  set undolevels=3000
  set undoreload=10000
endif
set backupdir=~/.local/share/vim/backup " Don't put backups in current dir
set backup
set noswapfile

" Reload icons after init source
if exists('g:loaded_webdevicons')
  call webdevicons#refresh()
endif

" Source vimrc
nnoremap <leader>sv :source ~/.vimrc<CR>:echo "Reloaded .vimrc"<CR>

" Toggle line number display
nnoremap <silent> <leader>tn :set relativenumber!<CR>

" cd into current buffer's directory
nnoremap <leader>cd :cd %:p:h<CR>

" Copy the full path of current buffer
nnoremap <silent> <leader>cp :let @+=expand('%:p')<CR>

" Disable vim-tmux-navigator's default key mapping
let g:tmux_navigator_no_mappings = 1
" Write all buffers before navigating from Vim to tmux pane
let g:tmux_navigator_save_on_switch = 1
" Disable tmux navigator when zooming the Vim pane
let g:tmux_navigator_disable_when_zoomed = 1
nnoremap <silent> <home>h :TmuxNavigateLeft<cr>
nnoremap <silent> <home>j :TmuxNavigateDown<cr>
nnoremap <silent> <home>k :TmuxNavigateUp<cr>
nnoremap <silent> <home>l :TmuxNavigateRight<cr>

" Switch between windows and panes
" Wrap window move cursor
function! s:GotoNextWindow( direction, count )
  let l:prevWinNr = winnr()
  execute a:count . 'wincmd' a:direction
  return winnr() != l:prevWinNr
endfunction

function! s:JumpWithWrap( direction, opposite )
  if ! s:GotoNextWindow(a:direction, v:count1)
    call s:GotoNextWindow(a:opposite, 999)
  endif
endfunction
nnoremap <silent> <leader>h :<C-u>call <SID>JumpWithWrap('h', 'l')<CR>
nnoremap <silent> <leader>j :<C-u>call <SID>JumpWithWrap('j', 'k')<CR>
nnoremap <silent> <leader>k :<C-u>call <SID>JumpWithWrap('k', 'j')<CR>
nnoremap <silent> <leader>l :<C-u>call <SID>JumpWithWrap('l', 'h')<CR>
nnoremap <silent> <leader><Left> :<C-u>call <SID>JumpWithWrap('h', 'l')<CR>
nnoremap <silent> <leader><Down> :<C-u>call <SID>JumpWithWrap('j', 'k')<CR>
nnoremap <silent> <leader><Up> :<C-u>call <SID>JumpWithWrap('k', 'j')<CR>
nnoremap <silent> <leader><Right> :<C-u>call <SID>JumpWithWrap('l', 'h')<CR>

" toggle window size
function! ToggleZoom(zoom)
  if exists("t:restore_zoom") && (a:zoom == v:true || t:restore_zoom.win != winnr())
      exec t:restore_zoom.cmd
      unlet t:restore_zoom
  elseif a:zoom
      let t:restore_zoom = { 'win': winnr(), 'cmd': winrestcmd() }
      exec "normal \<C-W>\|\<C-W>_"
  endif
endfunction
augroup restorezoom
    au WinEnter * silent! :call ToggleZoom(v:false)
augroup END
nnoremap <silent> <Leader>g :call ToggleZoom(v:true)<CR>

" close all windows except current one
nnoremap <silent> <leader>wo :wincmd o<CR>
" close current window
nnoremap <silent> <leader>wc :wincmd c<CR>
" swap 2 splits
nnoremap <silent> <leader>wr :wincmd r<CR>
" normalize split size
nnoremap <silent> <leader>w= :wincmd =<CR>
" open a new vertical split
nnoremap <silent> <leader>\ :wincmd v<CR>
" Close a window without resizing
nnoremap <silent> <leader>d :bp\|bd #<CR>

" Switch between horizontal and vertical split windows
nnoremap <silent> <leader>wh :windo wincmd K<CR>
nnoremap <silent> <leader>wv :windo wincmd H<CR>

" config gf command for vue file search
let proj_client_src = $PROJ_HOME.'/app/client/src/'
let proj_styles_src = $PROJ_HOME.'/app/client/src/assets/styles/'
set includeexpr=substitute(substitute(v:fname,'^\@\/',proj_client_src,''),'^\\~styles\/',proj_styles_src,'')
set suffixesadd=.js,.vue,.scss

" Toggle - inclusion in keyword
nnoremap <expr> <leader>t- ':set isk' . (index(split(&isk, ','), '-') == -1 ? '+' : '-') . '=-<cr>:set iskeyword?<cr>'
nnoremap <expr> <leader>t/ ':set isk' . (index(split(&isk, ','), '/') == -1 ? '+' : '-') . '=/<cr>:set iskeyword?<cr>'

"Graph view of git log
" command! -buffer -nargs=* Glg <mods> Git --paginate log --oneline --decorate --graph --all <args>
command -nargs=* Glg Git! log --graph --pretty=format:'\%h - (\%ad)\%d \%s <\%an>' --abbrev-commit --date=local <args>
